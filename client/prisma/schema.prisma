// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String?   @db.Text
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(VIEWER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  task          Task[]
  comment       Comment[]
}

model Account {
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String   @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String   @default("No description")
  status      Status   @default(IN_PROGRESS)
  boards      Board[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Board {
  id        String   @id @default(uuid())
  name      String
  lists     List[]
  status    Status   @default(IN_PROGRESS)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
}

model List {
  id        String   @id @default(uuid())
  name      String
  order     Int      @default(0)
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([boardId, order])
}

model Task {
  id          String    @id @default(uuid())
  name        String
  description String?
  order       Int       @default(0)
  list        List      @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId      String
  assigned    User      @relation(fields: [assignedId], references: [id])
  assignedId  String
  status      Status    @default(IN_PROGRESS)
  dateEnd     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]

  @@unique([listId, order])
}

model Comment {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  EDITOR_LIST
  VIEWER
}

enum Status {
  IN_PROGRESS
  DELAY
  COMPLETED
}
